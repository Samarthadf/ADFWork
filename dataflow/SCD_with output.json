{
	"name": "SCD_with output",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_scd_employee",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "ds_sink_scd_employee",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sink_scd_employee",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ds_sink_scd_employee",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "inputhash"
				},
				{
					"name": "outputhash"
				},
				{
					"name": "exists1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "exists2"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as string,",
				"          name as string,",
				"          dept as string,",
				"          startdate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          id as integer,",
				"          name as string,",
				"          dept as string,",
				"          isactive as integer,",
				"          start_date as date,",
				"          end_date as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source1 derive(inputhash = md5(name,dept)) ~> inputhash",
				"source2 derive(outputhash = md5(name,dept)) ~> outputhash",
				"inputhash, outputhash exists(inputhash == outputhash,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"exists1 derive(isactve = 1,",
				"          startdate = toDate(startdate,'dd-MM-yyyy'),",
				"          end_date = 9999) ~> derivedColumn1",
				"outputhash, inputhash exists(source2@name == source1@name",
				"     && source2@id == toInteger(source1@id),",
				"     negate:false,",
				"     broadcast: 'auto')~> exists2",
				"exists2 derive(isactive = 0,",
				"          end_date = toDate(currentUTC())) ~> derivedColumn2",
				"derivedColumn1 select(mapColumn(",
				"          id,",
				"          name,",
				"          dept,",
				"          startdate,",
				"          isactve,",
				"          end_date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"derivedColumn2 select(mapColumn(",
				"          id,",
				"          name,",
				"          dept,",
				"          isactive,",
				"          start_date,",
				"          end_date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 alterRow(updateIf(true())) ~> alterRow1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as integer,",
				"          name as string,",
				"          dept as string,",
				"          isactive as integer,",
				"          start_date as date,",
				"          end_date as date",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          id,",
				"          name,",
				"          dept,",
				"          isactive = isactve,",
				"          start_date = startdate,",
				"          end_date",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as integer,",
				"          name as string,",
				"          dept as string,",
				"          isactive as integer,",
				"          start_date as date,",
				"          end_date as date",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          id,",
				"          name,",
				"          dept,",
				"          isactive,",
				"          start_date,",
				"          end_date",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink2"
			]
		}
	}
}